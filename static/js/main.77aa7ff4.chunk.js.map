{"version":3,"sources":["Constants.js","components/todo-App/AuthenticationService.js","components/todo-App/AuthenticatedRoute.jsx","components/todo-App/LoginComponent.jsx","components/todo-App/HeaderComponent.jsx","api/todo/TodoDataService.js","components/todo-App/ListTodosComponent.jsx","components/todo-App/FooterComponent.jsx","api/todo/HelloWorldService.js","components/todo-App/WelcomeComponent.jsx","components/todo-App/ErrorComponen.jsx","components/todo-App/LogoutComponent.jsx","components/todo-App/UpdateComponent.jsx","api/schedule/EmployeeDataService.js","api/schedule/AvailibilityDataService.js","components/schedule-App/ListEmployeesComponent.jsx","components/schedule-App/UpdateEmployeeComponent.jsx","api/schedule/ShiftDataService.js","api/schedule/ScheduleDataService.js","components/schedule-App/PopComponent.jsx","components/schedule-App/ListShiftsComponent.jsx","components/schedule-App/SelectionComponent.jsx","components/schedule-App/UpdateShiftComponent.jsx","components/todo-App/todoApp.jsx","App.js","serviceWorker.js","index.js"],"names":["API_URL","JPA_API_URL","TIME_SLOT","0","1","2","3","4","5","6","LEVELS","POSITIONS","DAY_OF_WEEK","7","username","password","axios","post","token","console","log","sessionStorage","setItem","this","setupAxiosInterceptors","createJWTToken","basicAuthHeader","createBaiscAuthToken","get","headers","authorization","window","btoa","removeItem","getItem","user","interceptors","request","use","config","isUserLoggedIn","AuthenticatedRoute","AuthenticationService","props","to","Component","ShowCredentialStatus","loginStatus","className","LoginComponent","state","loginClicked","bind","handleChange","executeJwtAuthenticationService","then","response","registerSuccessfulLoginForJwt","data","setState","history","push","catch","event","target","name","value","type","onChange","onClick","HeaderComponent","href","src","width","height","alt","getUserLoggedIn","logout","withRouter","id","delete","todo","put","ListTodosComponent","todos","message","errorMessage","getUpdatedTodoList","StatusComponent","handleDeleteTodo","handleUpdateTodo","handleError","sort","a","b","map","key","description","moment","targetDate","format","toString","complete","note","TodoDataService","deleteTodo","error","getTodoList","FooterComponent","WelcomeComponent","WelcomeMessage","ErrorMessage","retrieveWelcomeMessage","handleSuccessfulReponse","match","params","HelloWorldService","executeHelloWorldPathVariableService","ErrorComponent","LogoutComponent","UpdateComponent","Number","Date","onSubmit","validate","getTodo","Boolean","createTodo","updateTodo","values","errors","length","isValid","initialValues","validateOnBlur","validateOnChange","enableReinitialize","component","as","placeholder","employee","availibility","ListEmployeesComponent","employees","avalibility","getUpdatedData","AvailibilityComponent","handleDeleteEmployee","handleUpdateEmployee","idx","employeeName","position","level","startDate","shiftLimitWeekly","EmployeeDataService","deleteEmployee","AvailibilityDataService","deleteAvailibility","getEmployeeList","getAvailibilityList","av","avMon","avTue","avWed","avThur","avFri","avSat","avSun","UpdateEmployeeComponent","getEmployee","getAvailibility","createEmployee","createAvailibility","updateEmployee","updateAvailibility","indexOf","i","senior_shift","shot_shift","avs","av_invalid","filter","shift","assigned_employee_id","shift_id","PopComponent","useState","popoverOpen","setPopoverOpen","comp_id","Button","color","UncontrolledPopover","trigger","placement","isOpen","toggle","PopoverHeader","title","PopoverBody","body","body_func","inputs","ListShiftsComponent","shifts_Mon","shifts_Tue","shifts_Wed","shifts_Thur","shifts_Fri","shifts_Sat","shifts_Sun","handleDeleteShift","handleUpdateShift","handleCopyShift","getAssignedEmployeeName","getTableBody","reAssign","handleSchedule","handleClearAll","showMatches","ScheduleDataService","getScheduledShiftList","clearSchedule","shifts","rowSpan","timeSlot","assignedId","e_id","j","document","getElementById","innerText","getMatchEmployeeList","selections","e","innerHTML","aria-label","role","ShiftDataService","assignNewEmployee","deleteShift","isModified","getShiftListOfDays","SelectionComponent","width_className","label","init","optionValues","idxs","UpdateShiftComponent","isCopy","slice","dayOfWeek","matchIds","matchEmployeeName","getUpdatedAssignedAndMatches","getMatches","getShift","forEach","element","isLinkedChange","createShift","updateShift","Object","keys","String","Array","rows","defaultValue","TodoApp","path","exact","App","location","hostname","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.77aa7ff4.chunk.js","sourcesContent":["export const API_URL = 'https://schedule-app.cfapps.io:8080'\n\nexport const JPA_API_URL = 'https://schedule-app.cfapps.io:8080/jpa'\n\nexport const TIME_SLOT = {0: \"Opening / 6am-1pm\", 1: \"Milk-morning / 7am-2pm\", 2: \"Junior / 7am-2pm\", 3: \"Junior / 8am-3pm\", 4: \"Shot / 1pm-6pm\", 5: \"Milk / 2pm-7pm\", 6: \"Junior / 2pm-7pm\"}\nexport const LEVELS = {4: \"Opening Senior Barista\", 3: \"Shot Barista\", 2: \"Milk Barista\", 1: \"Pourover Junior Barista\", 0: \"Register Junior Barista\"}\nexport const POSITIONS = ['Manager', 'Barista', 'Cook', 'Clean']\nexport const DAY_OF_WEEK = {1: \"Mon\", 2: \"Tue\", 3: \"Wed\", 4: \"Thur\", 5: \"Fri\", 6: \"Sat\", 7: \"Sun\"}","import axios from \"axios\";\nimport {API_URL} from '../../Constants'\nexport const USER_NAME_SESSION_ATTRIBUTE_NAME = 'authenticatedUser'\n\nclass AuthenticationService {\n\n    executeJwtAuthenticationService(username, password) {\n        // console.log(JwtAuthHeader)\n        return axios.post(`${API_URL}/authenticate`, {username, password})\n    }\n\n    registerSuccessfulLoginForJwt(username, token) {\n        console.log(\"registerSuccessfulLoginForJwt...\")\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createJWTToken(token))\n    }\n\n    createJWTToken(token) {\n        // encode authentication info\n        return 'Bearer ' + token\n    }\n\n    executeBasicAuthenticationService(username, password) {\n        let basicAuthHeader = this.createBaiscAuthToken(username, password)\n        // console.log(basicAuthHeader)\n        return axios.get(`${API_URL}/basicauth`, \n            {headers: {authorization: basicAuthHeader}})\n    }\n\n    createBaiscAuthToken(username, password) {\n        // encode authentication info\n        return 'Basic ' + window.btoa(username + \":\" + password)\n    }\n\n    registerSuccessfulLogin (username, password) {\n        console.log(\"registerSuccessfulLogin...\")\n        sessionStorage.setItem(USER_NAME_SESSION_ATTRIBUTE_NAME, username)\n        this.setupAxiosInterceptors(this.createBaiscAuthToken(username, password))\n    }\n\n    logout() {\n        sessionStorage.removeItem(USER_NAME_SESSION_ATTRIBUTE_NAME);\n    }\n\n    isUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if(user === null) return false\n        return true\n    }\n\n    getUserLoggedIn() {\n        let user = sessionStorage.getItem(USER_NAME_SESSION_ATTRIBUTE_NAME)\n        if(user === null) return false\n        return user\n    }\n\n    setupAxiosInterceptors(token) {\n\n        axios.interceptors.request.use(\n            (config) => {\n                if(this.isUserLoggedIn()) {\n                    config.headers.authorization = token\n                }\n                return config\n            }\n        )\n    }\n}\n\nexport default new AuthenticationService()","import React, {Component} from 'react'\nimport AuthenticationService from './AuthenticationService'\nimport { Route, Redirect } from 'react-router-dom'\n\nclass AuthenticatedRoute extends Component {\n    render () {\n        if (AuthenticationService.isUserLoggedIn()) {\n            return <Route {...this.props} />\n        } else {\n            return <Redirect to='/login'/>\n        }\n    }\n}\n\nexport default AuthenticatedRoute","import React, {Component} from 'react';\nimport AuthenticationService from './AuthenticationService.js'\n\nclass LoginComponent extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            username: 'Mazarine Coffee',\n            password: '',\n            loginStatus: 0\n        }\n        this.loginClicked = this.loginClicked.bind(this)\n        this.handleChange = this.handleChange.bind(this)\n    }\n\n    loginClicked () {\n        // if (this.state.username === \"bbchai\" && this.state.password === \"dummy\"){\n        //     AuthenticationService.registerSuccessfulLogin(this.state.username, this.state.password)\n        //     this.setState({loginStatus : 1})\n        //     this.props.history.push(`/welcome/${this.state.username}`)\n        // }\n        // else{\n        //     // console.log(\"fail\")\n        //     this.setState({loginStatus : 2})\n        // }\n\n        console.log(\"loginClicked...\")\n        // AuthenticationService\n        //     .executeBasicAuthenticationService(this.state.username, this.state.password)\n        //     .then(() => {\n        //         AuthenticationService.registerSuccessfulLogin(this.state.username,this.state.password)\n        //         this.setState({loginStatus : 1})\n        //         this.props.history.push(`/welcome/${this.state.username}`)\n        //     }).catch(() => {\n        //         console.log(\"error\")\n        //         this.setState({loginStatus : 2})\n        //     })\n            \n        AuthenticationService\n            .executeJwtAuthenticationService(this.state.username, this.state.password)\n            .then((response) => {\n                AuthenticationService.registerSuccessfulLoginForJwt(this.state.username, response.data.token)\n                this.setState({loginStatus : 1})\n                this.props.history.push(`/welcome/${this.state.username}`)\n            }).catch(() => {\n                console.log(\"error\")\n                this.setState({loginStatus : 2})\n            })\n    }\n\n    // general control states at once\n    handleChange (event) {\n        this.setState({ [event.target.name] : event.target.value })\n    }\n\n    render() {\n        return (\n            <div>\n                <h2>Login</h2>\n                \n                <ShowCredentialStatus loginStatus={this.state.loginStatus}/>\n                <div className='container'>\n                    User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n                    Password: <input type=\"password\" name=\"password\" value={this.state.password}  onChange={this.handleChange}/>\n                    <button className=\"btn btn-success\" onClick={this.loginClicked}>Login</button>\n                    {/* <form onSubmit={this.loginClicked}>\n                        User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handleChange}/>\n                        Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handleChange}/>\n                        <button type=\"submit\" className=\"btn btn-light\">Login</button>\n                    </form> */}\n                </div>\n            </div>\n        )\n    }\n}\n\nfunction ShowCredentialStatus (props) {\n    if (props.loginStatus === 2) {\n        return <div className='alert alert-warning'>Invalid Credential! Please enter your username and password again!</div>\n    }\n    return <div className='alert alert-secondary'>Please enter your username and password!</div>\n}\n\nexport default LoginComponent","import React, {Component} from 'react';\nimport AuthenticationService from './AuthenticationService.js'\nimport {Link} from 'react-router-dom'\nimport {withRouter} from 'react-router'\n\nclass HeaderComponent extends Component {\n    render () {\n        const isUserLoggedIn = AuthenticationService.isUserLoggedIn()\n        return (<header>\n                    <h1>Todo App</h1> \n                    <div className='font-italic font-weight-lighter'>Aim to help you organizing tasks nicely.</div>\n                    <nav className=\"navbar navbar-expand-md  text-white bg-secondary\">\n                        <div>\n                            <a className=\"navbar-brand text-info\" href='/'><img src='https://www.clker.com/cliparts/Z/E/c/1/z/X/icon-hause-gray-md.png' width = '40' height='40' alt='Home Icon'></img>Home</a>\n                        </div>\n                        {isUserLoggedIn &&\n                            <ul className=\"navbar-nav\">\n                                <li>\n                                    <Link to={`/welcome/${AuthenticationService.getUserLoggedIn()}`} className='nav-link text-white'>Welcome</Link>\n                                </li>\n                                <li>\n                                    <Link to='/todos' className='nav-link text-white'>Todos</Link>\n                                </li>\n                                <li>\n                                    <Link to={`/employees`} className='nav-link text-white'>Employees</Link>\n                                </li>\n                                <li>\n                                    <Link to={`/schedule`} className='nav-link text-white'>Schedule</Link>\n                                </li>\n                            </ul>\n                        }\n                        <ul className='navbar-nav navbar-collapse justify-content-end'>\n                            {!isUserLoggedIn &&\n                                <li>\n                                    <Link to='/login' className='nav-link text-white'>Login</Link>\n                                </li>\n                            }\n                            {isUserLoggedIn &&\n                                <li>\n                                    <Link to='/logout' className='nav-link text-white' onClick={AuthenticationService.logout}>Logout</Link>\n                                </li>\n                            }\n                        </ul>\n                    </nav>\n                    \n                    <hr/>\n                </header>)\n    }\n}\n\nexport default withRouter(HeaderComponent)","import axios from 'axios'\nimport {JPA_API_URL} from '../../Constants'\nclass TodoDataService {\n\n    getTodoList(name) {\n        return axios.get(`${JPA_API_URL}/users/${name}/todos`)\n    }\n\n    getTodo(name, id) {\n        return axios.get(`${JPA_API_URL}/users/${name}/todos/${id}`)\n    }\n    \n    deleteTodo(name, id) {\n        return axios.delete(`${JPA_API_URL}/users/${name}/todos/${id}`)\n    }\n\n    updateTodo(name, id, todo) {\n        return axios.put(`${JPA_API_URL}/users/${name}/todos/${id}`, todo)\n    }\n\n    createTodo(name, todo) {\n        return axios.post(`${JPA_API_URL}/users/${name}/todos`, todo)\n    }\n}\n\nexport default new TodoDataService()","import React, {Component} from 'react';\nimport TodoDataService from '../../api/todo/TodoDataService.js'\nimport AuthenticationService from './AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListTodosComponent extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            todos: [],\n            message: '',\n            errorMessage: ''\n        }\n        this.getUpdatedTodoList = this.getUpdatedTodoList.bind(this)\n        this.StatusComponent = this.StatusComponent.bind(this)\n        this.handleDeleteTodo = this.handleDeleteTodo.bind(this)\n        this.handleUpdateTodo = this.handleUpdateTodo.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n    render () {\n        return <div className=\"mx-md-3\">\n                    <h2>Todo List</h2>\n                    {this.state.message && <div className='alert alert-success'>{this.state.message}</div>}\n                    {this.state.errorMessage && <div className='alert alert-warning'>{this.state.errorMessage}</div>}\n                    <div className='text-left'>Username: {AuthenticationService.getUserLoggedIn()}</div>\n                    <table className=\"table table-striped table-bordered table-hover table-sm\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Id</th>\n                                <th>Description</th>\n                                <th>Target Date</th>\n                                <th>Is Completed?</th>\n                                <th>Note</th>\n                                <th>Update</th>\n                                <th>Delete?</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.todos.sort((a, b) => a.id - b.id).map(\n                                todo =>\n                                    <tr key={todo.id}>\n                                        <td>{todo.id}</td>\n                                        <td>{todo.description}</td>\n                                        <td>{moment(todo.targetDate).format('MM-DD-YYYY').toString()}</td>\n                                        <td>{this.StatusComponent(todo.complete)}</td>\n                                        <td className='text-wrap' >{todo.note}</td>\n                                        <td><button className='btn btn-success' onClick={() => this.handleUpdateTodo(todo.id)}>Update</button></td>\n                                        <td><button className='btn btn-warning' onClick={() => this.handleDeleteTodo(todo.id)}>Delete</button></td>\n                                    </tr>\n                            )}\n                        </tbody>\n                    </table>\n                    <div className='text-monospace'>\n                    <button className='btn btn-success' onClick={() => this.handleUpdateTodo(-1)}>Create New Todo</button>\n                    </div>\n                </div>\n    }\n\n\n    handleUpdateTodo(id) {\n        this.props.history.push(`/todos/${id}`)\n    }\n\n    handleDeleteTodo(id) {\n        let username = AuthenticationService.getUserLoggedIn()\n\n        TodoDataService.deleteTodo(username, id)\n        .then( response => {    this.getUpdatedTodoList(username);\n                                this.setState({message: `Delete Todo ${id} successfully. `}) })\n        .catch( error => {this.handleError(error)} )\n    }\n\n    getUpdatedTodoList(username) {\n        TodoDataService.getTodoList(username)\n        .then( response => { this.setState({todos: response.data}) } )\n        .catch( error => {this.handleError(error)} )\n    }\n\n    handleError(error) {\n        let message = ''\n        if (error.message) {\n            message += error.message\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        this.setState({errorMessage: message})\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getUserLoggedIn()\n        this.getUpdatedTodoList(username)\n    }\n\n    /*{\n    // unmount when the componnent is unmounted(removed from current view)\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    // control if the component should update its view immediately or not after a state is updated\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate')\n        console.log(nextProps, nextState)\n        return true\n    }\n    }*/\n\n    StatusComponent (complete) {\n        if (complete)\n            return <img src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcTUGc2FLh7VKR_AAzrukRd_QvI07IbsIhOG2uRJnamwxuy_cRZq&usqp=CAU' alt=\"Yes\" width=\"20\" height=\"20\"></img>\n        else\n            return <img src = 'https://encrypted-tbn0.gstatic.com/images?q=tbn%3AANd9GcQbhkd7ClFrxCmnOUfGks0PAtSOOjike3k0Fhoxs6u4AWZpgprK&usqp=CAU' alt=\"No\" width=\"20\" height=\"20\"></img>\n    }\n}\n\nexport default ListTodosComponent","import React, {Component} from 'react'\n\nclass FooterComponent extends Component {\n    render () {\n        return (\n            <footer className=\"footer\">\n                <span className=\"text-light\">All rights reserved 2020 @ZhiminCai</span>\n            </footer>\n                )\n    }\n}\n\nexport default FooterComponent","import axios from 'axios'\n\nclass HelloWorldService {\n    executeHelloWorldService() {\n        return axios.get('http://localhost:8080/hello-world')\n        // console.log('executed service')\n    }\n\n    executeHelloWorldBeanService() {\n        return axios.get('http://localhost:8080/hello-world-bean')\n        // console.log('executed service')\n    }\n\n    executeHelloWorldPathVariableService(name) {\n        return axios.get(`http://localhost:8080/hello-world/path-variable/${name}`)\n        // console.log('executed service')\n    }\n\n}\n\nexport default new HelloWorldService()","import React, {Component} from 'react'\nimport {Link} from 'react-router-dom'\nimport HelloWorldService from '../../api/todo/HelloWorldService.js'\n\nclass WelcomeComponent extends Component {\n    \n    constructor (props) {\n        super(props)\n        this.state= {\n            WelcomeMessage: '',\n            ErrorMessage: ''\n        }\n        this.retrieveWelcomeMessage = this.retrieveWelcomeMessage.bind(this)\n        this.handleSuccessfulReponse = this.handleSuccessfulReponse.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    render () {\n            return <>\n                        {this.state.ErrorMessage && \n                            <>\n                                <div className='container alert alert-warning'>\n                                    {this.state.ErrorMessage}\n                                </div>\n\n                                <div className='container'>\n                                Click here to try it again.\n                                <button onClick={() => this.retrieveWelcomeMessage(this.props.match.params.name)} className='btn btn-success'>Get Welcome Msg</button>\n                                </div>\n                            </>\n                        }\n\n\n                        {!this.state.ErrorMessage && \n                            <div className='container'>\n                                    <div className='container'>\n                                        {!this.state.WelcomeMessage && <div className=\"alert alert-success\">Your account has been Logged in Succesfully!</div>}\n                                        <img src=\"https://media1.giphy.com/media/26BRDSqaGfvWafqms/giphy.gif?cid=ecf05e47b62799232e77b8e541479d2a2e146b39ad808e8d&rid=giphy.gif\" alt='success welcome'></img>\n                                        <p><b>{this.state.WelcomeMessage}</b></p>\n                                        You can manage your todos <Link to='/todos'>here</Link>.\n                                    </div>\n                                    {!this.state.WelcomeMessage && \n                                        <div className='container text-monospace'>\n                                            <button onClick={() => this.retrieveWelcomeMessage(this.props.match.params.name)} className='btn btn-success'>Create Customized Welcome Message</button>\n                                        </div>\n                                    }\n                            </div>\n                        }\n                    </>\n    }\n\n    retrieveWelcomeMessage(name) {\n        HelloWorldService.executeHelloWorldPathVariableService(name)\n        .then(response => this.handleSuccessfulReponse(response))\n        .catch(error => this.handleError(error))\n    }\n\n    handleSuccessfulReponse(response) {\n        this.setState({WelcomeMessage: response.data.message})\n    }\n\n    handleError(error) {\n        let message = '';\n        // error might reflect on different layers\n        if (error.message) {\n            message += error.message\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        console.log(message)\n        this.setState({ErrorMessage: message})\n    }\n}\n\nexport default WelcomeComponent","import React from 'react'\n\nfunction ErrorComponent () {\n    return <div>An Error Ocurred. Please contack support at 888-000-111.</div>\n}\n\nexport default ErrorComponent","import React, {Component} from 'react'\n\nclass LogoutComponent extends Component {\n    render () {\n        return (<div>\n                    <h2>You are logged out</h2>\n                    <div className='container'>Thanks for using our application!</div>\n                </div>)\n    }\n}\n\nexport default LogoutComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport moment from 'moment'\nimport AuthenticationService from './AuthenticationService.js'\nimport TodoDataService from '../../api/todo/TodoDataService.js'\n\nclass UpdateComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: Number(this.props.match.params.id),\n            description: 'description.',\n            complete: false,\n            targetDate: moment(new Date()).format('YYYY-MM-DD'),\n            note: 'no thing new here...',\n            errorMessage:''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.state.id === -1) {\n            return\n        }\n        let username = AuthenticationService.getUserLoggedIn()\n        TodoDataService.getTodo(username, this.state.id)\n            .then(response => { \n                // console.log(response.data);\n                this.setState({\n                                description: response.data.description,\n                                complete: Boolean(response.data.complete),\n                                targetDate: moment(response.data.targetDate).format('YYYY-MM-DD'),\n                                note: response.data.note,\n            })})\n            // console.log(this.state);\n    }\n    \n    onSubmit(value) {\n        let username = AuthenticationService.getUserLoggedIn()\n        value.username = username\n        value.id = this.state.id\n        if (this.state.id === -1) {\n            TodoDataService.createTodo(username, value)\n            .then(response => {this.props.history.push('/todos')})\n            .catch(error => {this.handleError(error)})\n        } else {\n            TodoDataService.updateTodo(username, this.state.id, value)\n            .then(response => {this.props.history.push('/todos')})\n            .catch(error => {this.handleError(error)})\n        }\n    }\n\n    handleError(error) {\n        let message = ''\n        if (error.message) {\n            message += error.message\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        this.setState({errorMessage: message})\n    }\n\n    validate(values) {\n        let errors = {}\n\n        if (!values.description) {\n            errors.description = \"Please enter your Todo's description.\"\n        } else if (values.description.length < 5) {\n            errors.description = \"Please enter more than 5 charaters description.\"\n        }\n\n        if (!moment(values.targetDate).isValid()){\n            errors.targetDate = \"Please select a valid date for accomplishing your target.\"\n        }\n        return errors\n    }\n\n    render() {\n        let {id, description, targetDate, complete, note} = this.state\n        return (\n            <div>\n                {id >= 0 && <h3> Update Todo [{id}]</h3>}\n                {id === -1 && <h3> Create Todo</h3>}\n                {this.state.errorMessage && <div className='alert alert-warning'>{this.state.errorMessage}</div>}\n                <div className='container'>\n                    <Formik \n                        initialValues={{description, targetDate, complete, note}}\n                        onSubmit={this.onSubmit}\n                        validateOnBlur={false}\n                        validateOnChange={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form className='text-left'>\n                                    <div>\n                                        <ErrorMessage name=\"description\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"targetDate\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"isCompleted\" component='div' className='alert alert-warning'/>\n                                    </div>\n                                    <fieldset className='form-group'>\n                                        <label className='font-weight-bold'>Description</label>\n                                        <Field className='form-control' type='text' name=\"description\" id='description'/>\n                                        <small className=\"form-text text-muted text-centers\">Describe what you will accomplish in here.</small>\n                                    </fieldset>\n\n                                    <div className='form-row'>\n                                        <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Target Date</label>\n                                            <Field className='form-control' type='date' name='targetDate'/>\n                                        </fieldset>\n                                        <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Is Completed?</label>\n                                            <Field className='form-control'  as=\"select\" name=\"complete\" placeholder='Please select the status.'>\n                                                <option value=\"true\">Yes.</option>\n                                                <option value=\"false\">Still working on it.</option>\n                                            </Field>\n                                        </fieldset>\n                                    </div>\n\n                                    <fieldset className='form-group'>\n                                        <label className='font-weight-bold'>Note</label>\n                                        <Field className='form-control' type='text' name='note'/>\n                                        <small className=\"form-text text-muted\">Take notes about your plans, your timelines, and everything else.</small>\n                                    </fieldset>\n                                    <button type=\"submit\" className=\"btn btn-success\">Update</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UpdateComponent","import axios from 'axios'\nimport {API_URL} from '../../Constants'\nclass EmployeeDataService {\n\n    getEmployeeList(name) {\n        return axios.get(`${API_URL}/users/${name}/employees`)\n    }\n\n    getEmployee(name, id) {\n        return axios.get(`${API_URL}/users/${name}/employees/${id}`)\n    }\n    \n    deleteEmployee(name, id) {\n        return axios.delete(`${API_URL}/users/${name}/employees/${id}`)\n    }\n\n    updateEmployee(name, id, employee) {\n        return axios.put(`${API_URL}/users/${name}/employees/${id}`, employee)\n    }\n\n    createEmployee(name, employee) {\n        return axios.post(`${API_URL}/users/${name}/employees`, employee)\n    }\n}\n\nexport default new EmployeeDataService()","import axios from 'axios'\nimport {API_URL} from '../../Constants'\nclass AvailibilityDataService {\n\n    getAvailibilityList(name) {\n        return axios.get(`${API_URL}/users/${name}/availibilities`)\n    }\n\n    getAvailibility(name, id) {\n        return axios.get(`${API_URL}/users/${name}/availibilities/${id}`)\n    }\n    \n    deleteAvailibility(name, id) {\n        return axios.delete(`${API_URL}/users/${name}/availibilities/${id}`)\n    }\n\n    updateAvailibility(name, id, availibility) {\n        return axios.put(`${API_URL}/users/${name}/availibilities/${id}`, availibility)\n    }\n\n    createAvailibility(name, availibility) {\n        return axios.post(`${API_URL}/users/${name}/availibilities`, availibility)\n    }\n}\n\nexport default new AvailibilityDataService()","import React, {Component} from 'react';\nimport EmployeeDataService from '../../api/schedule/EmployeeDataService.js'\nimport AvailibilityDataService from '../../api/schedule/AvailibilityDataService.js'\nimport AuthenticationService from '../todo-App/AuthenticationService.js'\nimport moment from 'moment'\n\nclass ListEmployeesComponent extends Component {\n    constructor (props) {\n        super(props)\n        this.state = {\n            employees: [],\n            avalibility: [],\n            message: '',\n            errorMessage: ''\n        }\n        this.getUpdatedData = this.getUpdatedData.bind(this)\n        this.AvailibilityComponent = this.AvailibilityComponent.bind(this)\n        this.handleDeleteEmployee = this.handleDeleteEmployee.bind(this)\n        this.handleUpdateEmployee = this.handleUpdateEmployee.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n    render () {\n        return <div className=\"mx-md-3\">\n                    <h2>Employees</h2>\n                    {this.state.message && <div className='alert alert-success'>{this.state.message}</div>}\n                    {this.state.errorMessage && <div className='alert alert-warning'>{this.state.errorMessage}</div>}\n                    <div className='text-left'>Username: {AuthenticationService.getUserLoggedIn()}</div>\n                    <table className=\"table table-striped table-bordered table-hover table-sm\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Id</th>\n                                <th>Name</th>\n                                <th>Position</th>\n                                <th>Level</th>\n                                <th>Start Date</th>\n                                <th>Shift Limit Weekly</th>\n                                <th>Avalibility Weekly</th>\n                                <th>Update</th>\n                                <th>Delete?</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.employees.map(\n                                (employee, idx) =>\n                                    <tr key={employee.id}>\n                                        <td>{employee.id}</td>\n                                        <td>{employee.employeeName}</td>\n                                        <td>{employee.position}</td>\n                                        <td>{employee.level}</td>\n                                        <td>{moment(employee.startDate).format('MM-DD-YYYY').toString()}</td>\n                                        <td>{employee.shiftLimitWeekly}</td>\n                                        <td>{this.AvailibilityComponent(idx)}</td>\n                                        <td><button className='btn btn-success' onClick={() => this.handleUpdateEmployee(employee.id)}>Update</button></td>\n                                        <td><button className='btn btn-warning' onClick={() => this.handleDeleteEmployee(employee.id)}>Delete</button></td>\n                                    </tr>\n                            )}\n                        </tbody>\n                    </table>\n                    <div className='text-monospace'>\n                    <button className='btn btn-success' onClick={() => this.handleUpdateEmployee(-1)}>Create New Employee</button>\n                    </div>\n                </div>\n    }\n\n\n    handleUpdateEmployee(id) {\n        this.props.history.push(`/employees/${id}`)\n    }\n\n    handleDeleteEmployee(id) {\n        let username = AuthenticationService.getUserLoggedIn()\n\n        EmployeeDataService.deleteEmployee(username, id)\n        .catch( error => {this.handleError(error)} )\n\n        AvailibilityDataService.deleteAvailibility(username, id)\n        .then( response => {    this.getUpdatedData(username);\n                                this.setState({message: `Delete Employee ${id} successfully. `}) })\n        .catch( error => {this.handleError(error)} )\n    }\n\n    getUpdatedData(username) {\n        EmployeeDataService.getEmployeeList(username)\n        .then( response => { this.setState({employees: response.data.sort((a, b) => a.id - b.id)}) } )\n        .catch( error => {this.handleError(error)} )\n\n        AvailibilityDataService.getAvailibilityList(username)\n        .then( response => {this.setState({avalibility: response.data.sort((a, b) => a.id - b.id)}) })\n        .catch( error => {this.handleError(error)})\n    }\n\n    handleError(error) {\n        //\n        let message = this.state.message\n        if (error.message) {\n            message += error.message\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        this.setState({errorMessage: message})\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getUserLoggedIn()\n        this.getUpdatedData(username)\n    }\n\n    /*{\n    // unmount when the componnent is unmounted(removed from current view)\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    // control if the component should update its view immediately or not after a state is updated\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate')\n        console.log(nextProps, nextState)\n        return true\n    }\n    }*/\n\n    AvailibilityComponent (idx) {\n        let av = this.state.avalibility[idx]\n        if (typeof(av) !== 'undefined')\n            return <ul className=\"list-group list-group-horizontal-sm\">\n                        <li className=\"list-group-item flex-fill list-group-item-secondary\">Mon <div>{av.avMon}</div></li>\n                        <li className=\"list-group-item flex-fill bg-white text-dark\">Tue <div>{av.avTue}</div></li>\n                        <li className=\"list-group-item flex-fill list-group-item-secondary\">Wed <div>{av.avWed}</div> </li>\n                        <li className=\"list-group-item flex-fill bg-white text-dark\">Thur <div>{av.avThur}</div></li>\n                        <li className=\"list-group-item flex-fill list-group-item-secondary\">Fri <div>{av.avFri}</div></li>\n                        <li className=\"list-group-item flex-fill bg-white text-dark\">Sat <div>{av.avSat}</div></li>\n                        <li className=\"list-group-item flex-fill list-group-item-secondary\">Sun <div>{av.avSun}</div></li>\n                    </ul>\n    }\n}\n\nexport default ListEmployeesComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport moment from 'moment'\nimport AuthenticationService from '../todo-App/AuthenticationService.js'\nimport EmployeeDataService from '../../api/schedule/EmployeeDataService.js'\nimport AvailibilityDataService from '../../api/schedule/AvailibilityDataService.js'\n\nclass UpdateEmployeeComponent extends Component {\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: Number(this.props.match.params.id),\n            employeeName: 'name',\n            position: 'Barista',\n            level: '0',\n            startDate: moment(new Date()).format('YYYY-MM-DD'),\n            shiftLimitWeekly: '0',\n            avMon: -1,\n            avTue: -1,\n            avWed: -1,\n            avThur: -1,\n            avFri: -1,\n            avSat: -1,\n            avSun: -1,\n            errorMessage:''\n        }\n\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n        this.handleError = this.handleError.bind(this)\n    }\n\n    componentDidMount() {\n        if (this.state.id === -1) {\n            return\n        }\n        let username = AuthenticationService.getUserLoggedIn()\n        EmployeeDataService.getEmployee(username, this.state.id)\n            .then(response => { \n                this.setState({\n                                employeeName: response.data.employeeName,\n                                position: response.data.position,\n                                level: response.data.level,\n                                startDate: moment(response.data.startDate).format('YYYY-MM-DD'),\n                                shiftLimitWeekly: response.data.shiftLimitWeekly\n            })})\n\n        AvailibilityDataService.getAvailibility(username, this.state.id)\n            .then(response => { \n                this.setState({\n                                avMon: response.data.avMon,\n                                avTue: response.data.avTue,\n                                avWed: response.data.avWed,\n                                avThur: response.data.avThur,\n                                avFri: response.data.avFri,\n                                avSat: response.data.avSat,\n                                avSun: response.data.avSun\n            })})\n    }\n    \n    onSubmit(value) {\n        let username = AuthenticationService.getUserLoggedIn()\n        let employee = {\n                            username: username,\n                            id: this.state.id,\n                            employeeName: value.employeeName,\n                            position: value.position,\n                            level: value.level,\n                            startDate: moment(value.startDate).format('YYYY-MM-DD'),\n                            shiftLimitWeekly: value.shiftLimitWeekly\n        }\n        var av = {\n                    username: username,\n                    id: this.state.id,\n                    avMon: value.avMon,\n                    avTue: value.avTue,\n                    avWed: value.avWed,\n                    avThur: value.avThur,\n                    avFri: value.avFri,\n                    avSat: value.avSat,\n                    avSun: value.avSun\n        }\n\n        if (this.state.id === -1) {\n            EmployeeDataService.createEmployee(username, employee)\n                .then(response => {\n                    // use same id return from employee create for matching\n                    av.id = response.data\n\n                    AvailibilityDataService.createAvailibility(username, av)\n                        .then(response => {this.props.history.push('/employees')})\n                        .catch(error => {this.handleError(error)})\n                })\n                .catch(error => {this.handleError(error)})\n\n        } else {\n            EmployeeDataService.updateEmployee(username, this.state.id, employee)\n                .then( () => {\n                    AvailibilityDataService.updateAvailibility(username, this.state.id, av)\n                    .then(response => {this.props.history.push('/employees')})\n                    .catch(error => {this.handleError(error)})\n                })\n                .catch(error => {this.handleError(error)})\n\n        }\n    }\n\n    validate(values) {\n        let errors = {}\n\n        if (!values.employeeName) {\n            errors.employeeName = \"Employee's name is required.\"\n        } else if (values.employeeName.length > 20) {\n            errors.employeeName = \"Please enter less than 20 charaters name.\"\n        }\n\n        if (!values.startDate) {\n            errors.startDate = \"Employee's Start-Date is required.\"\n        } else if (!moment(values.startDate).isValid()){\n            errors.startDate = \"Please select a valid date for start date.\"\n        }\n\n        var pos = ['Manager', 'Barista', 'Cook', 'Clean']\n        if (!values.position) {\n            errors.position = \"Employee's Position is required.\"\n        } else if (pos.indexOf(values.position) === -1) {\n            errors.position = \"Please enter a valid position.\"\n        }\n\n        if (!values.level && values.level !== 0) {\n            errors.level = \"Employee's Level is required.\"\n        } else if (0 > values.level || values.level > 4) {\n            errors.level = \"Please enter a valid level.\"\n        }\n\n        if (!values.shiftLimitWeekly && values.shiftLimitWeekly !== 0) {\n            errors.shiftLimitWeekly = \"Shift-Limit-Weekly is required.\"\n        } else if (0 > values.shiftLimitWeekly || values.shiftLimitWeekly >= 7) {\n            errors.shiftLimitWeekly = \"Please enter a valid shift-Limit-Weekly (0 - 7).\"\n        }\n\n        var senior_shift = [0, 1, 4, 5]\n        var shot_shift = [0, 4]\n        var avs = [values.avMon, values.avTue, values.avWed, values.avThur, values.avFri, values.avSat, values.avSun]\n        var av_invalid = false\n\n        var min_av = -1, max_av = 6, i\n        for (i in avs) {\n            if (avs[i] === '' || avs[i] < min_av || avs[i] > max_av) {\n                av_invalid = !av_invalid\n                break\n            }\n        }\n\n        if (!errors.level){ // Only consider these when level is valid\n            var invalid_overlap\n            if (av_invalid) {\n                errors.avMon = \"Please select shift numbers within valid range.\"\n            }\n            else if (values.level <= 1) {\n                invalid_overlap = avs.filter(av => senior_shift.indexOf(Number(av)) >= 0)\n    \n                if (invalid_overlap.length > 0) {\n                    errors.avMon = \"Please select a valid shift(junior / register) according to the level.\"\n                }\n            } \n            else if (values.level <= 2) {\n                invalid_overlap = avs.filter(av => shot_shift.indexOf(Number(av)) >= 0)\n                if (invalid_overlap.length > 0) {\n                    errors.avMon = \"Please select a valid shift(milk / junior / register) according to the level.\"\n                }\n            }\n            else if (values.level <= 3) {\n                invalid_overlap = avs.filter(av => Number(av) !== 0)\n                if (invalid_overlap.length > 0) {\n                    errors.avMon = \"Please select a valid shift(excluding openning shift) according to the level.\"\n                }\n            }\n        }\n\n        // console.log(errors)\n        \n        return errors\n    }\n\n    handleError(error) {\n        let message = ''\n        if (error.message) {\n            message += error.message\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        this.setState({errorMessage: message})\n    }\n\n    render() {\n        let {id, employeeName, position, level, startDate, shiftLimitWeekly, avMon, avFri, avSat\n        , avSun, avThur, avTue, avWed} = this.state\n        \n        return (\n            <div>\n                \n                {id >= 0 && <h3> Update Employee [{id}]</h3>}\n                {id === -1 && <h3> Create Employee</h3>}\n                {this.state.errorMessage && <div className='alert alert-warning'>{this.state.errorMessage}</div>}\n                <div className='container'>\n                    <Formik \n                        initialValues={{employeeName, position, level, startDate, shiftLimitWeekly, avMon, avFri, avSat\n                            , avSun, avThur, avTue, avWed}}\n                        onSubmit={this.onSubmit}\n                        validateOnBlur={false}\n                        validateOnChange={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form className='text-left'>\n                                    <div>\n                                        <ErrorMessage name=\"employeeName\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"startDate\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"position\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"level\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"shiftLimitWeekly\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"avMon\" component='div' className='alert alert-warning'/>\n                                    </div>\n\n                                    <div className='form-row'>\n                                        <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Employee Name</label>\n                                            <Field className='form-control' type='text' name=\"employeeName\"/>\n                                        </fieldset>\n\n                                    <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Start Date</label>\n                                            <Field className='form-control' type='date' name='startDate'/>\n                                    </fieldset>\n                                    </div>\n\n                                    <div className='form-row'>\n                                        <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Position</label>\n                                            <Field className='form-control' type='text' name=\"position\"/>\n                                            <small className=\"form-text text-muted text-centers\">Position: [Manager, Barista, Cook, Clean]</small>\n                                        </fieldset>\n\n                                        <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Level</label>\n                                            <Field className='form-control' type='int' name=\"level\"/>\n                                            <small className=\"form-text text-muted text-centers\">Level description: [4: opening / senior, 3: shot / senior, 2: milk / senior, 1: pourover / junior, 0: register / new]</small>\n                                        </fieldset>\n\n                                        <fieldset className='form-group col-md-6'>\n                                            <label className='font-weight-bold'>Shift Limits Weekly</label>\n                                            <Field className='form-control' type='int' name=\"shiftLimitWeekly\"/>\n                                            <small className=\"form-text text-muted text-centers\">Please record here about number of shifts (0-7) the employee would like to take per week.</small>\n                                        </fieldset>\n                                    </div>\n\n                                    <div className='form-row'>\n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Monday</label>\n                                            <Field className='form-control' type='int' name='avMon'/>\n                                        </fieldset>\n                                        \n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Tuesday</label>\n                                            <Field className='form-control' type='int' name='avTue'/>\n                                        </fieldset>\n\n\n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Wednesday</label>\n                                            <Field className='form-control' type='int' name='avWed'/>\n                                        </fieldset>\n\n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Thurday</label>\n                                            <Field className='form-control' type='int' name='avThur'/>\n                                        </fieldset>\n                                        \n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Friday</label>\n                                            <Field className='form-control' type='int' name='avFri'/>\n                                        </fieldset>\n\n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Saturday</label>\n                                            <Field className='form-control' type='int' name='avSat'/>\n                                        </fieldset>\n\n                                        <fieldset className='form-group col-md-1'>\n                                            <label className='font-weight-bold'>Sunday</label>\n                                            <Field className='form-control' type='int' name='avSun'/>\n                                        </fieldset>\n\n                                        <small className=\"form-text text-muted text-centers\">Shift: [0: opening / 6am-1pm, 1: milk-morning / 7am-2pm, 2: junior / 7am-2pm, 3: junior / 8am-3pm, 4: senior / 1pm-6pm, 5: milk / 2pm-7pm, 6: junior / 2pm-7pm]</small>\n                                    </div>\n                                    <button type=\"submit\" className=\"btn btn-success\">Update</button>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UpdateEmployeeComponent","import axios from 'axios'\nimport {API_URL} from '../../Constants'\nclass ShiftDataService {\n\n    getShiftList(name) {\n        return axios.get(`${API_URL}/users/${name}/shifts`)\n    }\n    \n    getShiftListOfDays(name) {\n        return axios.get(`${API_URL}/users/${name}/shifts/days_of_week`)\n    }\n\n    getShift(name, id) {\n        return axios.get(`${API_URL}/users/${name}/shifts/${id}`)\n    }\n    \n    deleteShift(name, id) {\n        return axios.delete(`${API_URL}/users/${name}/shifts/${id}`)\n    }\n\n    updateShift(name, id, shift) {\n        return axios.put(`${API_URL}/users/${name}/shifts/${id}`, shift)\n    }\n\n    createShift(name, shift) {\n        return axios.post(`${API_URL}/users/${name}/shifts`, shift)\n    }\n\n    assignNewEmployee(name, id, assigned_employee_id) {\n        return axios.get(`${API_URL}/users/${name}/shifts/${id}/assign/${assigned_employee_id}`)\n    }\n}\n\nexport default new ShiftDataService()","import axios from 'axios'\nimport {API_URL} from '../../Constants'\nclass ScheduleDataService {\n\n    getScheduledShiftList(name) {\n        return axios.get(`${API_URL}/users/${name}/schedule`)\n    }\n\n    clearSchedule(name) {\n        return axios.delete(`${API_URL}/users/${name}/clear-schedule`)\n    }\n    \n    getMatchEmployeeList(name, shift_id) {\n        return axios.get(`${API_URL}/users/${name}/shift-match/${shift_id}`)\n    }\n\n}\n\nexport default new ScheduleDataService()","import React, {useState} from 'react';\n// import { Button, Collapse, CardBody, Card } from 'reactstrap';\nimport { Button, UncontrolledPopover, PopoverHeader, PopoverBody } from 'reactstrap';\n\nfunction PopComponent(props) {\n  const [popoverOpen, setPopoverOpen] = useState(false);\n\n  const toggle = () => setPopoverOpen(!popoverOpen);\n  const comp_id = \"Popover\" + props.id;\n  const body_func = () => {\n                              if(props.body_func){\n                                  return props.body_func(...props.inputs)\n                              }\n                          }\n  return (\n    <div>\n      <Button id={comp_id} type=\"button\" color={props.color}>\n        +\n      </Button>\n      <UncontrolledPopover trigger=\"legacy\" placement=\"bottom\" isOpen={popoverOpen} target={comp_id} toggle={toggle}>\n        <PopoverHeader>{props.title}</PopoverHeader>\n        <PopoverBody>{props.body} {popoverOpen && body_func()}</PopoverBody>\n      </UncontrolledPopover>\n    </div>\n  );\n}\n\nexport default PopComponent","import React, {Component} from 'react';\nimport EmployeeDataService from '../../api/schedule/EmployeeDataService.js'\nimport ShiftDataService from '../../api/schedule/ShiftDataService.js'\nimport ScheduleDataService from '../../api/schedule/ScheduleDataService.js'\nimport AuthenticationService from '../todo-App/AuthenticationService.js'\nimport {LEVELS, TIME_SLOT, DAY_OF_WEEK} from '../../Constants'\nimport PopComponent from './PopComponent'\n\nclass ListShiftsComponent extends Component {\n\n    constructor (props) {\n        super(props)\n        this.state = {\n            shifts_Mon: [],\n            shifts_Tue: [],\n            shifts_Wed: [],\n            shifts_Thur: [],\n            shifts_Fri: [],\n            shifts_Sat: [],\n            shifts_Sun: [],\n            message: '',\n            errorMessage: '',\n        }\n\n        this.getUpdatedData = this.getUpdatedData.bind(this)\n        this.handleDeleteShift= this.handleDeleteShift.bind(this)\n        this.handleUpdateShift = this.handleUpdateShift.bind(this)\n        this.handleCopyShift = this.handleCopyShift.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.getAssignedEmployeeName = this.getAssignedEmployeeName.bind(this)\n        this.getTableBody = this.getTableBody.bind(this)\n        this.reAssign = this.reAssign.bind(this)\n        this.handleSchedule = this.handleSchedule.bind(this)\n        this.handleClearAll = this.handleClearAll.bind(this)\n        this.showMatches = this.showMatches.bind(this)\n    }\n    \n    render () {\n        return <div className=\"mx-md-3\">\n                    <h2>Schedule</h2>\n                    {this.state.message && <div className='alert alert-success'>{this.state.message}</div>}\n                    {this.state.errorMessage && <div className='alert alert-warning'>{this.state.errorMessage}</div>}\n                    <div className='text-left'>Username: {AuthenticationService.getUserLoggedIn()}</div>\n                    <div className=\"input-group mb-3\">\n                        <div className=\"input-group-prepend\">\n                            <button type='button' className='btn btn-outline-success' onClick={this.handleSchedule}>Schedule</button>\n                        </div>\n                        <button type='button' className='btn btn-outline-danger' onClick={this.handleClearAll}>Clear All</button>\n                    </div>\n                    <table className=\"table table-striped table-bordered table-hover table-sm\">\n                        <thead className=\"thead-light\">\n                            <tr>\n                                <th>Day</th>\n                                <th>Id</th>\n                                <th>Position</th>\n                                <th>Level</th>\n                                <th>Time Slot</th>\n                                <th>Assignment</th>\n                                <th>Description</th>\n                                <th>Note</th>\n                                <th>Update</th>\n                                <th>Delete</th>\n                                <th>Copy</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.getTableBody()}\n                        </tbody>\n                    </table>\n                    <div className='text-monospace'>\n                    <button className='btn btn-outline-success' onClick={() => this.handleUpdateShift(-1)}>Create New Shift</button>\n                    </div>\n                </div>\n    }\n\n    handleSchedule() {\n        let username = AuthenticationService.getUserLoggedIn()\n        ScheduleDataService.getScheduledShiftList(username)\n            .then(response => {\n                this.getUpdatedData(username, true)})\n            .catch( error => {this.handleError(error)} )\n    }\n\n    handleClearAll() {\n        let username = AuthenticationService.getUserLoggedIn()\n        ScheduleDataService.clearSchedule(username)\n            .then(response => {\n                this.getUpdatedData(username, true)})\n            .catch( error => {this.handleError(error)} )\n    }\n\n    getTableBody() {\n        var shift_of_day = [this.state.shifts_Mon, this.state.shifts_Tue, this.state.shifts_Wed, this.state.shifts_Thur\n                        , this.state.shifts_Fri, this.state.shifts_Sat, this.state.shifts_Sun];\n        return shift_of_day.map(\n                    (shifts, idx) => \n                        shifts.map(\n                            (shift, i) =>\n                                <tr key={shift.id}>\n                                    {i === 0 && <th rowSpan={shifts.length} className=\"text-info align-middle\"> {DAY_OF_WEEK[idx + 1]}</th>}\n                                    <td>{shift.id}</td>\n                                    <td>{shift.position}</td>\n                                    <td>{LEVELS[shift.level]}</td>\n                                    <td>{TIME_SLOT[shift.timeSlot]}</td>\n                                    <td>\n                                        <div className=\"input-group mb-3\">\n                                            <div className=\"input-group-prepend\">\n                                                {this.getAssignedEmployeeName(shift.assignedId, idx, i)}\n                                            </div>\n                                            <div>\n                                                <PopComponent color='outline-secondary' id={'matches-'+idx+'-'+i} title='Shift Matches:' body_func={this.showMatches} inputs={[shift.id, idx, i]}/>\n                                            </div>\n                                        </div>\n                                    </td>\n                                    <td><PopComponent color='outline-info' id={'desc-'+idx+'-'+i} title='Shift Reponsibilities:' body={shift.description}/></td>\n                                    <td>{shift.note}</td>\n                                    <td><button className='btn-sm btn-outline-secondary' onClick={() => this.handleUpdateShift(shift.id)}>Update</button></td>\n                                    <td><button className='btn-sm btn-outline-warning' onClick={() => this.handleDeleteShift(shift.id)}>Delete</button></td>\n                                    <td><button className='btn-sm btn-outline-info' onClick={() => this.handleCopyShift(shift.id)}>Copy</button></td>\n                                </tr>\n                        )\n                            \n                )\n    }\n\n    getAssignedEmployeeName (e_id, i, j) {\n        let username = AuthenticationService.getUserLoggedIn()\n        let id = 'assigned-employee-name' + i +'-'+ j\n        if (e_id >= 0) {\n            EmployeeDataService.getEmployee(username, e_id)\n                .then(response => {\n                    if (response !== null && response.data !== null){\n                        document.getElementById(id).innerText = response.data.employeeName\n                    }\n                })\n                .catch(error => {this.handleError(error)})\n            return <div className=\"btn btn-outline-dark\" id = {id}>dummy</div>\n        }\n        else{\n            return <div className=\"btn btn-outline-dark\" id = {id}>---</div>\n        }\n    }\n\n    showMatches (shift_id, i, j) {\n        let username = AuthenticationService.getUserLoggedIn()\n        let id = 'select-matches-' + i +'/'+ j\n        if (shift_id >= 0) {\n\n            ScheduleDataService.getMatchEmployeeList(username, shift_id)\n                .then(response => {\n                    if (response !== null && response.data !== null){\n                        var selections = \"\"\n                        response.data.map(\n                            e => {\n                                selections += `<button type='button' value=${e.id} class='btn btn-outline-info'>${e.employeeName}</button>`\n                                return null\n                            }\n                        )\n                        selections += \"<button type='button' value=-1 class='btn btn-outline-warning'>Clear</button>\"\n                        \n                        document.getElementById(id).innerHTML = selections\n                    }\n                })\n                .catch(error => {this.handleError(error)})\n        }\n\n        return <div className='btn-group' onClick={(event) => this.reAssign(event, shift_id)} aria-label=\"Button-Group\" id={id} role=\"group\">...</div>\n    }\n\n    reAssign (event, shift_id) {\n        let username = AuthenticationService.getUserLoggedIn()\n\n        console.log('new assigned e id: ' + event.target.value + ', shift_id: ' + shift_id)\n        // change the shift's assigned-employee-Id\n        ShiftDataService.assignNewEmployee(username, shift_id, event.target.value)\n            .then(response => {\n                this.getUpdatedData(username, true)})\n            .catch( error => {this.handleError(error)} )\n    }\n\n    handleUpdateShift(id) {\n        this.props.history.push(`/shifts/${id}`)\n    }\n\n    handleCopyShift(id) {\n        this.props.history.push(`/shifts/${id + '-1'}`)\n    }\n\n    handleDeleteShift(id) {\n        let username = AuthenticationService.getUserLoggedIn()\n\n        ShiftDataService.deleteShift(username, id)\n            .then( response => {    \n                this.getUpdatedData(username, true);\n            })\n            .catch( error => {this.handleError(error)} )\n    }\n\n    getUpdatedData(username, isModified) {\n        ShiftDataService.getShiftListOfDays(username)\n            .then( response => {\n                // var shifts_Mon, shifts_Tue, shifts_Wed, shifts_Thur, shifts_Fri, shifts_Sat, shifts_Sun = response.data; \n                // this.setState({shifts_Mon, shifts_Tue, shifts_Wed, shifts_Thur, shifts_Fri, shifts_Sat, shifts_Sun});\n                var message = ''\n                if (isModified) {\n                    message = 'Modified successfully. '\n                } \n                this.setState({shifts_Mon: response.data[0], shifts_Tue: response.data[1], \n                                shifts_Wed: response.data[2], shifts_Thur: response.data[3], \n                                shifts_Fri: response.data[4], shifts_Sat: response.data[5], \n                                shifts_Sun: response.data[6], message: message});\n                console.log('get updated data....', this.state)\n            } )\n            .catch( error => {this.handleError(error)})\n    }\n\n    handleError(error) {\n        // get error from different layers\n        let message = this.state.message\n        if (error.message) {\n            message += error.message\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        this.setState({errorMessage: message})\n    }\n\n    componentDidMount() {\n        let username = AuthenticationService.getUserLoggedIn()\n        this.getUpdatedData(username, false)\n    }\n\n    /*{\n    // unmount when the componnent is unmounted(removed from current view)\n    componentWillUnmount() {\n        console.log('componentWillUnmount')\n    }\n\n    // control if the component should update its view immediately or not after a state is updated\n    shouldComponentUpdate(nextProps, nextState) {\n        console.log('shouldComponentUpdate')\n        console.log(nextProps, nextState)\n        return true\n    }\n    }*/\n\n}\n\nexport default ListShiftsComponent","import React from 'react';\nimport { Field } from 'formik'\n\nfunction SelectionComponent(props) {\n  \n  return (\n    <fieldset className={'form-group ' + props.width_className}>\n    <label className='font-weight-bold'>{props.label}</label>\n    <Field className=\"form-control\" as=\"select\" type={props.type} name={props.name}>\n        <option value={props.init}>---- Please Select... ----</option>\n        {!props.optionValues && \n              props.idxs.map(\n                  i => <option key={i} value={i}>{props.selections[i]}</option>)\n        }\n        {props.optionValues && props.optionValues === 'original' &&\n              props.idxs.map(\n                  i => <option key={i} value={props.selections[i]}>{props.selections[i]}</option>)}\n\n        {props.optionValues && props.optionValues !== 'original' &&\n              props.idxs.map(\n                  i => <option key={i} value={props.optionValues[i]}>{props.selections[i]}</option>)}\n    </Field>\n    </fieldset>\n  );\n}\n\nexport default SelectionComponent","import React, { Component } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport {LEVELS, TIME_SLOT, DAY_OF_WEEK, POSITIONS} from '../../Constants'\nimport AuthenticationService from '../todo-App/AuthenticationService.js'\nimport ShiftDataService from '../../api/schedule/ShiftDataService.js'\nimport ScheduleDataService from '../../api/schedule/ScheduleDataService.js'\nimport SelectionComponent from './SelectionComponent'\nimport EmployeeDataService from '../../api/schedule/EmployeeDataService'\n\nclass UpdateShiftComponent extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.state = {\n            id: Number(this.props.match.params.id),\n            isCopy: Number(this.props.match.params.id) !== -1 && this.props.match.params.id.slice(-2,) === '-1',\n            dayOfWeek: -1,\n            position: '',\n            level: '0',\n            timeSlot: -1,\n            assignedId: -1,\n            description: 'Responsibilities description.',\n            note: 'special note for the shift.',\n            matchIds: [],\n            matchEmployeeName: [],\n            errorMessage: ''\n        }\n        if (this.state.isCopy) {\n            this.state.id = this.props.match.params.id.slice(0,-2)\n        }\n        this.onSubmit = this.onSubmit.bind(this)\n        this.validate = this.validate.bind(this)\n        this.handleError = this.handleError.bind(this)\n        this.getUpdatedAssignedAndMatches = this.getUpdatedAssignedAndMatches.bind(this)\n        this.getMatches = this.getMatches.bind(this)\n        this.reAssign = this.reAssign.bind(this)\n\n        console.log('constructor ', this.state.id, this.state.isCopy,Number(this.props.match.params.id) !== -1, this.props.match.params.id.slice(-2,), this.props.match.params.id.slice(0,-2))\n        \n    }\n\n    componentDidMount() {\n\n        console.log('componentDidMount')\n        if (this.state.id === -1) {\n            return\n        }\n        let username = AuthenticationService.getUserLoggedIn()\n\n        ShiftDataService.getShift(username, this.state.id)\n            .then(response => { \n                if (this.state.isCopy) {\n                    this.setState({ dayOfWeek: response.data.dayOfWeek,\n                                    position: response.data.position,\n                                    level: response.data.level,\n                                    timeSlot: response.data.timeSlot,\n                                    assignedId: -1,\n                                    description: response.data.description,\n                                    note: response.data.note})\n                } else {\n                    this.setState({ dayOfWeek: response.data.dayOfWeek,\n                                    position: response.data.position,\n                                    level: response.data.level,\n                                    timeSlot: response.data.timeSlot,\n                                    assignedId: response.data.assignedId,\n                                    description: response.data.description,\n                                    note: response.data.note})\n                }\n                this.getUpdatedAssignedAndMatches(username)\n            })\n            .catch(error => {this.handleError(error)})\n    }\n\n    getMatches(username, matchIds, matchEmployeeName) {\n        \n        ScheduleDataService.getMatchEmployeeList(username, this.state.id)\n        .then(response => {\n            if (response !== null && response.data !== null) {\n                response.data.forEach(\n                    element => {\n                                    matchIds.push(element.id)\n                                    matchEmployeeName.push(element.employeeName)\n                });\n                this.setState({matchIds, matchEmployeeName})\n            }\n        })\n        .catch(error => {this.handleError(error)})\n    }\n\n    getUpdatedAssignedAndMatches(username) {\n\n        let matchIds = [], matchEmployeeName = []\n\n        if (this.state.assignedId !== -1) {\n            EmployeeDataService.getEmployee(username, this.state.assignedId)\n            .then(response =>{\n                matchIds.push(this.state.assignedId)\n                matchEmployeeName.push(response.data.employeeName)\n\n                this.getMatches(username, matchIds, matchEmployeeName)\n            })\n            .catch(error => {this.handleError(error)})\n\n        }else {\n            this.getMatches(username, matchIds, matchEmployeeName)\n        }\n    }\n    \n    onSubmit(value) {\n\n        console.log('onSubmit')\n        let username = AuthenticationService.getUserLoggedIn()\n        value.username = username\n\n        value.id = this.state.id\n        value.assignedId = this.state.assignedId\n\n        if (this.state.isCopy) {\n            value.id = -1\n            value.assignedId = -1\n            console.log('Is copy: ', -1)\n        }\n\n        let isLinkedChange = false\n        if (value.dayOfWeek !== this.state.dayOfWeek || value.position !== this.state.position \n                || value.level !== this.state.level || value.timeSlot !== this.state.timeSlot ) {\n            isLinkedChange = true\n            value.assignedId = -1\n        }\n\n        console.log('onSubmit: ', value)\n\n        if (value.id === -1) {\n            console.log('create ')\n            ShiftDataService.createShift(username, value)\n                .then(response => {\n                    //update generated_id from backend and value \n                    this.setState({ \n                        isCopy: false,\n                        id: Number(response.data),\n                        dayOfWeek: value.dayOfWeek,\n                        position: value.position,\n                        level: value.level,\n                        timeSlot: value.timeSlot,\n                        assignedId: value.assignedId,\n                        description: value.description,\n                        note: value.note})\n\n                    //get new matches\n                    if (isLinkedChange) {\n                        this.getUpdatedAssignedAndMatches(username)\n                    }\n\n                    console.log('create complete', this.state, response.data)\n                })\n                .catch(error => {this.handleError(error)})\n\n        } else {\n            ShiftDataService.updateShift(username, value.id, value)\n                .then( response => {\n                    //update values\n                    this.setState({ \n                        dayOfWeek: response.data.dayOfWeek,\n                        position: response.data.position,\n                        level: response.data.level,\n                        timeSlot: response.data.timeSlot,\n                        assignedId: response.data.assignedId,\n                        description: response.data.description,\n                        note: response.data.note})\n                    //get new matches\n                    if (isLinkedChange) {\n                        this.getUpdatedAssignedAndMatches(username)\n                    }\n                })\n                .catch(error => {this.handleError(error)})\n        }\n    }\n\n    validate(values) {\n        console.log(values)\n        let errors = {}\n\n        if (Object.keys(TIME_SLOT).indexOf(String(values.timeSlot)) === -1) {\n            errors.timeSlot = \"Please select a valid time slot.\" +  String(values.timeSlot)\n        }\n\n        if (Object.keys(DAY_OF_WEEK).indexOf(String(values.dayOfWeek)) === -1){\n            errors.dayOfWeek = \"Please select a valid day of week.\" + String(values.dayOfWeek)\n        }\n\n        if (!values.position) {\n            errors.position = \"Shift's Position is required.\"\n        } else if (POSITIONS.indexOf(values.position) === -1) {\n            errors.position = \"Please select a valid position.\"\n        }\n\n        if (0 > values.level || values.level >= LEVELS.length) {\n            errors.level = \"Please select a valid level.\"\n        }\n\n        if (values.note && values.note.length > 300) {\n            errors.note = \"Please enter less than 300 charaters note.\"\n        }\n\n        if (!values.description) {\n            errors.description = \"Shift's decription is required.\"\n        } else if (values.description.length > 500) {\n            errors.description = \"Please enter less than 500 charaters decription.\"\n        }\n\n        // console.log(errors)\n        \n        return errors\n    }\n\n    handleError(error) {\n\n        console.log(error.name, error.response)\n        let message = ''\n        if (error.message) {\n            message += error.message + '.    \\n'\n        }\n        if (error.response && error.response.data) {\n            message += error.response.data.message\n        }\n\n        this.setState({errorMessage: message})\n    }\n\n    reAssign (event) {\n        let username = AuthenticationService.getUserLoggedIn()\n\n        if (this.state.id === -1) {\n            this.setState({errorMessage: \"Please save shift's data first.\"})\n        } else {\n            console.log('new assigned e id: ')\n            console.log( event.target.value + ', shift_id: ' + this.state.id)\n            // change the shift's assigned-employee-Id\n            ShiftDataService.assignNewEmployee(username, this.state.id, event.target.value)\n                .then(response => {\n                    this.setState({assignedId: response.data.assignedId})\n                    console.log('new assignment is completed ', this.state.assignedId)\n                })\n                .catch( error => {this.handleError(error)} )\n        }\n    }\n\n    render() {\n        console.log('render')\n        let {id, dayOfWeek, position, level, timeSlot, description, note} = this.state\n\n        return (\n            <div>\n                \n                {id >= 0 && <h3> Update Shift [{id}]</h3>}\n                {id === -1 && <h3> Create Shift</h3>}\n\n                {this.state.errorMessage && <div className='alert alert-warning'>{this.state.errorMessage}</div>}\n\n                <div className='container justify-content-center text-monospace mb-5'>\n                    <Formik \n                        initialValues={{ dayOfWeek, position, level, timeSlot, description, note}}\n                        onSubmit={this.onSubmit}\n                        validateOnBlur={false}\n                        validateOnChange={false}\n                        validate={this.validate}\n                        enableReinitialize={true}\n                    >\n                        {\n                            (props) => (\n                                <Form className='text-left' >\n                                    <div>\n                                        <ErrorMessage name=\"dayOfWeek\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"timeSlot\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"position\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"level\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"description\" component='div' className='alert alert-warning'/>\n                                        <ErrorMessage name=\"note\" component='div' className='alert alert-warning'/>\n                                    </div>\n\n                                    <div className='form-row'>\n                                        <SelectionComponent label='Time Slot' type=\"int\" name='timeSlot' init={-1} selections={TIME_SLOT} \n                                                                idxs={[...Array(7).keys()] } width_className='col-md-5'/>\n\n                                        <SelectionComponent label='Day Of Week' type=\"int\" name='dayOfWeek' init={-1} selections={DAY_OF_WEEK} \n                                                                idxs={[...Array(8).keys()].slice(1,)} width_className='col-md-5'/>\n                                    </div>\n\n                                    <div className='form-row'>\n                                        <SelectionComponent label='Position' type=\"text\" name='position' init='' selections={POSITIONS} \n                                                                idxs={[...Array(4).keys()]} width_className='col-md-5' optionValues=\"original\"/>\n\n                                        <SelectionComponent label='Minimal Required Level' type=\"int\" name='level' init={-1} selections={LEVELS} \n                                                                idxs={[...Array(5).keys()]} width_className='col-md-5'/>\n\n                                    </div>\n\n                                    <div className='form-row'>\n                                        <fieldset className='form-group col-md-10'>\n                                            <label className='font-weight-bold'>Description</label>\n                                            <Field className='form-control' component='textarea' rows={3} type='textarea' name=\"description\"/>\n                                            <small className=\"form-text text-muted text-centers\">Please Describe Responsibilities about the position here.</small>\n                                        </fieldset>\n                                    </div>\n\n                                    <div className='form-row'>\n                                    <fieldset className='form-group col-md-10'>\n                                            <label className='font-weight-bold'>Note</label>\n                                            <Field className='form-control' component='textarea' rows={3} type='textarea' name='note'/>\n                                            <small className=\"form-text text-muted text-centers\">For Special Instructions.</small>\n                                    </fieldset>\n                                    </div>\n\n                                    <div className='form-row  justify-content-center'>\n                                        <button type=\"submit\" className=\"btn btn-warning\">Save</button>\n                                    </div>\n                                </Form>\n                            )\n                        }\n                    </Formik>\n                </div>\n\n                \n                <div className=\"card col-md-5 container bg-warning\">\n                    <div className=\"card-header bg-white  text-warning text-center\">\n                        Please Save Above Changes to Load the Updated Match Employees.\n                    </div>\n                    <div className=\"card-body \">\n                        <select className=\"form-control\" value={this.state.assignedId} defaultValue={-1} onChange={(event) => this.reAssign(event)}>\n                            <option value={-1}>---- Please Select... ----</option>\n                            {this.state.matchEmployeeName.map(\n                                    (name, i) => <option value={this.state.matchIds[i]} key={i} >{name}</option>)\n                            }\n                        </select>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default UpdateShiftComponent","import React, {Component} from 'react';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom'\nimport AuthenticatedRoute from './AuthenticatedRoute'\nimport LoginComponent from './LoginComponent'\nimport HeaderComponent from './HeaderComponent'\nimport ListTodosComponent from './ListTodosComponent'\nimport FooterComponent from './FooterComponent'\nimport WelcomeComponent from './WelcomeComponent'\nimport ErrorComponent from './ErrorComponen'\nimport LogoutComponent from './LogoutComponent'\nimport UpdateComponent from './UpdateComponent'\nimport ListEmployeesComponent from '../schedule-App/ListEmployeesComponent'\nimport UpdateEmployeeComponent from '../schedule-App/UpdateEmployeeComponent'\nimport ListShiftsComponent from '../schedule-App/ListShiftsComponent'\nimport UpdateShiftComponent from '../schedule-App/UpdateShiftComponent'\n\nclass TodoApp extends Component {\n    render () {\n        return (\n            <div className='todoApp' id=\"content-wrap\">\n                <Router>\n                    <>\n                        <HeaderComponent/>\n                        <Switch>\n                            <Route path=\"/\" exact component={LoginComponent}/>\n                            <Route path=\"/login\" component={LoginComponent}/>\n                            <AuthenticatedRoute path=\"/welcome/:name\" component={WelcomeComponent}/>\n                            <AuthenticatedRoute path=\"/todos\"  exact component={ListTodosComponent}/>\n                            <AuthenticatedRoute path=\"/logout\" component={LogoutComponent}/>\n                            <AuthenticatedRoute path=\"/todos/:id\" component={UpdateComponent}/>\n                            <AuthenticatedRoute path=\"/employees/:id\" component={UpdateEmployeeComponent}/>\n                            <AuthenticatedRoute path=\"/employees\" component={ListEmployeesComponent}/>\n                            <AuthenticatedRoute path=\"/schedule\" component={ListShiftsComponent}/>\n                            <AuthenticatedRoute path=\"/shifts/:id\" component={UpdateShiftComponent}/>\n                            <Route component={ErrorComponent}/>\n                        </Switch>\n                        <FooterComponent/>\n                    </>\n                </Router>\n            </div>\n        )\n    }\n}\n\nexport default TodoApp","import React, { Component } from 'react';\n// import FirstComponent from './components/learning-examples/FirstComponent.jsx'\n// import SecondComponent from './components/learning-examples/SecondComponent.jsx'\n// import ThirdComponent from './components/learning-examples/ThirdComponent.jsx'\n// import Counter from './components/counter/Counter.jsx'\nimport TodoApp from './components/todo-App/todoApp.jsx'\n// import logo from './logo.svg';\nimport './App.css';\nimport './bootstrap.css'\n \nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/*<Counter/>*/}\n        <TodoApp/>\n      </div>\n    )\n  }\n}\n\n// class LearningComponents extends Component {\n//   render() {\n//     return (\n//       <div className=\"LearningComponents\">\n//         Learning Components!\n//         <FirstComponent></FirstComponent>\n//         <SecondComponent></SecondComponent>\n//         <ThirdComponent></ThirdComponent>\n//       </div>\n//     )\n//   }\n// }\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}